from sklearn.impute import SimpleImputer  # Handling Missing Values
from sklearn.preprocessing import StandardScaler  # Handling Feature Scaling
from sklearn.preprocessing import OrdinalEncoder  # Ordinal Encoding
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
import sys
import os
from dataclasses import dataclass
import pandas as pd
import numpy as np

# Add the path to your project directory
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.join(current_dir, '..')
sys.path.append(parent_dir)
egg_path = r"C:\Users\HP\Desktop\PW Python\Breast Cancer\Neural Network Assignment\breastcancer\Lib\site-packages\breast_cancer_project-0.0.1-py3.8.egg\src"
sys.path.append(egg_path)

# Import the logging module and custom exceptions
from logger import logging
from exception import CustomException
from utils import save_object

## Data Transformation config
@dataclass
class DataTransformationconfig:
    preprocessor_obj_file_path=os.path.join('artifacts','preprocessor.pkl')

## Data Ingestionconfig class
class DataTransformation:
    def __init__(self):
        self.data_transformation_config=DataTransformationconfig()
        
    def get_data_transformation_object(self):
         
         try:
            logging.info('Data Transformation initiated')
            # Define which columns should be ordinal-encoded and which should be scaled
            numerical_cols = [
                'mean radius', 'mean texture', 'mean perimeter', 'mean area', 'mean smoothness',
                'mean compactness', 'mean concavity', 'mean concave points', 'mean symmetry',
                'mean fractal dimension', 'radius error', 'texture error', 'perimeter error',
                'area error', 'smoothness error', 'compactness error', 'concavity error',
                'concave points error', 'symmetry error', 'fractal dimension error',
                'worst radius', 'worst texture', 'worst perimeter', 'worst area', 'worst smoothness',
                'worst compactness', 'worst concavity', 'worst concave points', 'worst symmetry',
                'worst fractal dimension',
            ]
            
            logging.info('Pipeline Initiated')

            ## Numerical Pipeline
            num_pipeline=Pipeline(
                steps=[
                ('imputer',SimpleImputer(strategy='median')),
                ('scaler',StandardScaler())
                ]
            )
            
            preprocessor=ColumnTransformer([
            ('num_pipeline',num_pipeline,numerical_cols)
            ])
            
            logging.info('Pipeline Completed')
            return preprocessor

         except Exception as e:
            logging.info("Error in Data Trnasformation")
            raise CustomException(e,sys)

    def initiate_data_transformation(self,train_path,test_path):
        try:
            # Reading train and test data
            train_df = pd.read_csv(train_path)
            test_df = pd.read_csv(test_path)

            logging.info('Read train and test data completed')
            logging.info(f'Train Dataframe Head : \n{train_df.head().to_string()}')
            logging.info(f'Test Dataframe Head  : \n{test_df.head().to_string()}')
            logging.info('Obtaining preprocessing object')

            preprocessing_obj = self.get_data_transformation_object()

            target_column_name = 'target'
            drop_columns = [target_column_name,'_id']
            
            ## features into independent and dependent features
            input_feature_train_df = train_df.drop(columns=drop_columns,axis=1)
            target_feature_train_df=train_df[target_column_name]

            input_feature_test_df=test_df.drop(columns=drop_columns,axis=1)
            target_feature_test_df=test_df[target_column_name]

            ## apply the transformation
            input_feature_train_arr=preprocessing_obj.fit_transform(input_feature_train_df)
            input_feature_test_arr=preprocessing_obj.transform(input_feature_test_df)

            logging.info("Applying preprocessing object on training and testing datasets.")
            train_arr = np.c_[input_feature_train_arr, np.array(target_feature_train_df)]
            test_arr = np.c_[input_feature_test_arr, np.array(target_feature_test_df)]

            save_object(
                file_path=self.data_transformation_config.preprocessor_obj_file_path,
                obj=preprocessing_obj
            )

            logging.info('Processsor pickle in created and saved')

            return(
                train_arr,
                test_arr,
                self.data_transformation_config.preprocessor_obj_file_path
            )

        except Exception as e:
            logging.error("Exception occured in the initiate_datatransformation")
            raise CustomException(e,sys)
        
if __name__ == "__main__":
    try:
        # Provide the paths to your train and test data files
        train_path = "artifacts/train.csv"
        test_path = "artifacts/test.csv"
        
        data_transformation = DataTransformation()
        data_transformation.initiate_data_transformation(train_path, test_path)
        
    except Exception as e:
        logging.error(f"Error in main: {e}")
        print(f"Error in main: {e}")
